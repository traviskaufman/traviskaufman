<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Travis Kaufman]]></title>
  <subtitle><![CDATA[Software Person]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://traviskaufman.io/"/>
  <updated>2015-03-29T03:19:55.000Z</updated>
  <id>http://traviskaufman.io/</id>
  
  <author>
    <name><![CDATA[Travis Kaufman]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Why I Have Devoted My Life to Writing Software]]></title>
    <link href="http://traviskaufman.io/2015/03/why-i-have-devoted-my-life-to-writing-software/"/>
    <id>http://traviskaufman.io/2015/03/why-i-have-devoted-my-life-to-writing-software/</id>
    <published>2015-03-29T03:16:41.000Z</published>
    <updated>2015-03-29T03:19:55.000Z</updated>
    <content type="html"><![CDATA[<p>Now is a great time to live. We sit in clothes, on a chair, in a house, with lights, electricity, running water, air conditioning, etc. We retrieve meals without moving an inch or saying a word. We store our money all across the world and spend it as if it were right in our pockets. Maybe most importantly of all, we have a little briefcase-like device made from glass and wire that can connect you to all of the information in the world; and it’s considered inefficient if it can’t do that in under 15 seconds.</p>
<p>Funny thing is, 100 years ago people probably felt the same way I do now, and 100 years from now people will probably feel the same way as well. The irony is that every 100 years people say about the people who lived a century before them: “I can’t believe how they lived without […]!!”</p>
<p>Think about it: forget 100 years go, how about 30 years? Have you ever thought “I don’t know how I’d live without my cell phone”? People living in the 70s lived without them every day. Forget 30 years ago, let’s talk 10 years ago. Some people can’t live without their smart phone apps, but when the new millenium rang the phrase “angry birds” was still being used in a (presumably) highly negative context.</p>
<p>But now these technologies do exist. And they’re awesome. Because they make your life easier. And when your life’s easier you feel better. And when you feel better, you’re happier. And when you’re happier, you share that happiness with the people around you. And then the world becomes a better place. All because you could order food at the touch of a button, see in an instant what everyone in your life you care about is doing, and find out more than you’d ever care to know about anything you may care about, a lot of the time discovering new things on the way. And that is the most beautiful thing in the world.</p>
<p>And that is why I have devoted my life to the art of developing software.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Now is a great time to live. We sit in clothes, on a chair, in a house, with lights, electricity, running water, air conditioning, etc. W]]>
    </summary>
    
      <category term="software thoughts industry" scheme="http://traviskaufman.io/tags/software-thoughts-industry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Better Jasmine Tests With `this`]]></title>
    <link href="http://traviskaufman.io/2015/03/better-jasmine-tests-with-this/"/>
    <id>http://traviskaufman.io/2015/03/better-jasmine-tests-with-this/</id>
    <published>2015-03-29T03:00:20.000Z</published>
    <updated>2015-03-29T03:18:05.000Z</updated>
    <content type="html"><![CDATA[<p><small>Republished from <a href="https://gist.githubusercontent.com/traviskaufman/11131303/raw/cc0ebcd1911317ae01c4fef4e9175c7da94bc1c8/jasmine-this-vars.md" target="_blank" rel="external">this original gist</a></small></p>
<p>On the Refinery29 Mobile Web Team, codenamed “Bicycle”, all of our unit tests are written using <a href="http://jasmine.github.io/2.0/introduction.html" target="_blank" rel="external">Jasmine</a>, an awesome BDD library written by <a href="http://pivotallabs.com/" target="_blank" rel="external">Pivotal Labs</a>. We recently switched how we set up data for tests from declaring and assigning to closures, to assigning properties to each test case’s <code>this</code> object, and we’ve seen some awesome benefits from doing such.</p>
<h2 id="The_old_way">The old way</h2><p>Up until recently, a typical unit test for us looked something like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'views.Card'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="pi">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> model, view;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    model = &#123;&#125;;</span><br><span class="line">    view = <span class="keyword">new</span> CardView(model);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'.render'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      model.title = <span class="string">'An Article'</span>;</span><br><span class="line">      view.render();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'creates a "cardTitle" h3 element set to the model\'s title'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      expect(view.$el.find(<span class="string">'.cardTitle'</span>)).toContainText(model.title);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    describe(<span class="string">'when the model card type is "author_card"'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        model.type = <span class="string">'author_card'</span>;</span><br><span class="line">        view.render();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      it(<span class="string">'adds an "authorCard" class to its $el'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        expect(view.$el).toHaveClass(<span class="string">'authorCard'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>We set up state by declaring variables within a <code>describe</code> block’s lexical scope. We then assign/modify them as necessary in subsequent <code>beforeEach</code>/<code>afterEach</code> statements.</p>
<p>We noticed, however, that as our tests became more complex, this pattern became increasingly difficult. We found ourselves jumping around spec files, trying to find out where a given variable was initially defined. We also ran into subtle bugs due to clobbering variables with common names (i.e. <code>model</code>, <code>view</code>) within a given scope, failing to realize they had <em>already</em> been defined. Furthermore, our declaration statements in <code>describe</code> blocks started looking something like</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstVar, secondVar, thirdVar, fourthVar, fifthVar, ..., nthVar</span><br></pre></td></tr></table></figure>
<p>Which was ugly and hard to parse. Finally, we would sometimes run into flaky tests due to “leaks” - test-specific variables that were not properly cleaned up after each case.</p>
<h2 id="The_new,_better_way">The new, better way</h2><p>For every test (and their <code>beforeEach</code>/<code>afterEach</code> hooks), jasmine sets the receiver of each function to an <a href="http://jasmine.github.io/2.0/introduction.html#section-The_&lt;code&gt;this&lt;/code&gt;_keyword" target="_blank" rel="external">initially empty object</a>. This object, which is called <code>userContext</code> within Jasmine’s source code, can have properties assigned to it, and gets blown away at the end of each test. In an attempt to address the issues we were having, we recently switched over to assigning variables to this object, rather than declaring them within <code>describe</code> and then assigning them. So our original code above now looked something like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'views.Card'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="pi">  'use strict'</span>;</span><br><span class="line"></span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.view = <span class="keyword">new</span> CardView(<span class="keyword">this</span>.model);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'.render'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.model.title = <span class="string">'An Article'</span>;</span><br><span class="line">      <span class="keyword">this</span>.view.render();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'creates a "cardTitle" h3 element set to the model\'s title'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      expect(<span class="keyword">this</span>.view.$el.find(<span class="string">'.cardTitle'</span>)).toContainText(<span class="keyword">this</span>.model.title);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    describe(<span class="string">'when the model card type is "author_card"'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.model.type = <span class="string">'author_card'</span>;</span><br><span class="line">        <span class="keyword">this</span>.view.render();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      it(<span class="string">'adds an "authorCard" class to its $el'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        expect(<span class="keyword">this</span>.view.$el).toHaveClass(<span class="string">'authorCard'</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Why_the_new_way_rocks">Why the new way rocks</h2><p>Switching over to this pattern has yielded a significant amount of benefits for us, including:</p>
<h3 id="No_more_global_leaks">No more global leaks</h3><p>Because jasmine instantiates a new <code>userContext</code> object for each test case, we didn’t have to worry about test pollution any more. This helped ensure isolation between our tests, making them a lot more reliable.</p>
<h3 id="Clear_meaning">Clear meaning</h3><p>Every time we see a <code>this.&lt;PROP&gt;</code> reference in our tests, we know that it refers to data set up in a <code>beforeEach</code>/<code>afterEach</code> statement. That, coupled with removing exhaustive var declarations in <code>describe</code> blocks, have made even our largest tests clear and understandable.</p>
<h3 id="Improved_code_reuse_via_dynamic_invocation-">Improved code reuse via dynamic invocation.</h3><p>One of the best things about javascript is its facilities for <a href="http://dailyjs.com/2012/10/26/di1/" target="_blank" rel="external">dynamic invocation</a>. Because we now use the <code>userContext</code> object to store all of our variables, and jasmine dynamically invokes each test function and hook with this context, we could begin to refactor our boilerplate code into helper functions that could be reused across specs.</p>
<p>Consider the initial beforeEach in our test case above:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.model = &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.view = <span class="keyword">new</span> CardView(<span class="keyword">this</span>.model);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Chances are we’re going to want something like this in most of our view specs: a blank model and a view instantiated with the model as its argument. We can turn this logic into a reusable function like so:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spec_helper.js</span></span><br><span class="line">beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setupViewModel = <span class="function"><span class="keyword">function</span> <span class="title">setupViewModel</span><span class="params">(ViewCtor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.view = <span class="keyword">new</span> ViewCtor(<span class="keyword">this</span>.model);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Now, in any of our view tests, we could just write the following:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.setupViewModel(SomeView);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>And we’d be good to go!</p>
<h3 id="Reduced_Code_Duplication_via_Lazy_Evaluation">Reduced Code Duplication via Lazy Evaluation</h3><p>This is where things get really awesome.</p>
<p>It’s unfortunate in our original spec that we have to call <code>render()</code> twice. We call it once in the top-level <code>beforeEach</code>, and then again when we change the model’s state in the nested <code>describe()</code>. We could call render <em>directly</em> within the tests, but we’d rather keep all business logic within <code>beforeEach</code> statements, making only assertions within tests themselves. RSpec has this really nice <a href="https://www.relishapp.com/rspec/rspec-core/v/2-6/docs/helper-methods/let-and-let" target="_blank" rel="external">let() helper method</a> which will lazily evaluate a variable. This way even if a variable relies on some context, it need not have to be declared more than once.</p>
<p>Thankfully, because we’re now assigning our variables to <code>this</code>, we can take advantage of <a href="http://blog.kitsonkelly.com/2013/02/es5-accessor-properties/" target="_blank" rel="external">ES5 accessor properties</a> to implement this lazy evaluation in our javascript specs!! Take a look at how our new render test cases would look when leveraging this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'.render'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _renderedView;</span><br><span class="line">    <span class="keyword">this</span>.model.title = <span class="string">'An Article'</span>;</span><br><span class="line">    <span class="comment">// When we access this property, it will call `render()` on `this.view` and give</span></span><br><span class="line">    <span class="comment">// us a fresh, updated copy per test. No code duplication FTW!!</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, <span class="string">'renderedView'</span>, &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!_renderedView) &#123;</span><br><span class="line">          _renderedView = <span class="keyword">this</span>.view.render();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> _renderedView;</span><br><span class="line">      &#125;,</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;, <span class="comment">//NOP</span></span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  it(<span class="string">'creates a "cardTitle" h3 element set to the model\'s title'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    expect(<span class="keyword">this</span>.renderedView.$el.find(<span class="string">'.cardTitle'</span>)).toContainText(<span class="keyword">this</span>.model.title);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'when the model card type is "author_card"'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.model.type = <span class="string">'author_card'</span>;</span><br><span class="line">      <span class="comment">// No need to re-render the view here!</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'adds an "authorCard" class to its $el'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      expect(<span class="keyword">this</span>.renderedView.$el).toHaveClass(<span class="string">'authorCard'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Taking this a step further, we can genericize this within a spec helper file:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// spec_helper.js</span></span><br><span class="line">beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// need to use "_" suffix since 'let' is a token in ES6</span></span><br><span class="line">  <span class="keyword">this</span>.let_ = <span class="function"><span class="keyword">function</span><span class="params">(propName, getter)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _lazy;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, propName, &#123;</span><br><span class="line">      get: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!_lazy) &#123;</span><br><span class="line">          _lazy = getter.call(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> _lazy;</span><br><span class="line">      &#125;,</span><br><span class="line">      set: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;&#125;,</span><br><span class="line">      enumerable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Now in your specs:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'.render'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  beforeEach(<span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.let_(<span class="string">'renderedView'</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.view.render();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.model.title = <span class="string">'An Article'</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Pretty slick if you ask us. However, it is important to <a href="http://robots.thoughtbot.com/lets-not" target="_blank" rel="external"><em>be judicious</em> when doing things such as this</a>. The method above uses a fair amount of black magic, and can lead to confusion if your team members aren’t that familiar with newer ES5 concepts. However, taking advantage of these mechanisms in a smart manner can lead to a lot of reduced code duplication and therefore much higher test maintainability. We’d consider that a win for any team!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><small>Republished from <a href="https://gist.githubusercontent.com/traviskaufman/11131303/raw/cc0ebcd1911317ae01c4fef4e9175c7da94bc1c8/j]]>
    </summary>
    
      <category term="javascript, testing" scheme="http://traviskaufman.io/tags/javascript-testing/"/>
    
  </entry>
  
</feed>